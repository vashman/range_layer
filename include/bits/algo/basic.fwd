// Basic range operations.

//          Copyright Sundeep S. Sangha 2015 - 2018.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#ifndef RANGE_LAYER_BITS_ALGO_BASIC_FWD
#define RANGE_LAYER_BITS_ALGO_BASIC_FWD

#include <type_traits>
#include "../traits.fwd"

namespace range_layer {
/*==============================================================================
  Basic Range Operations

# Template Types
1. R = Range
2. N = Natural number of any size.
3. T = Element
==============================================================================*/

/*==============================================================================
  Non-Modifing

All non-modifing functions cannot;
* transverse the range.
* modify the elements in the range.
* resize the range.

# ```const auto & read (const R &, N)```
## Pre-Conditions
## Effects
## Post-Conditions
## Requires
## Throws
## Exception Safty
## Returns

* Same as read(R, (position(R)+read_size(R)-1)) when only read
- It may not move the type, but return a copy.
- Will transverse the range once with read(const R&).

# ```decltype(auto) size (const R &)```
* The size can only change when extending or shrinknig the
  range. Otherwise the range is invalidated.

## Pre-Conditions
## Effects
## Post-Conditions
## Requires
* The size can only change when extending or shrinking the range.
  Otherwise the range is invalidated.

## Throws
* Never throws.

## Exception Safty
* Safe as long as range is not modified when calling function.

## Returns
* Natural number representing the total size of the range.
* For infinite ranges

# ```decltype(auto) position (const R &)```
* UB to call once the range has ended.
* The position starts at zero.

## Pre-Conditions
## Effects
## Post-Conditions
## Requires
## Throws
* Never throws.

## Exception Safty
* UB to call once the range has ended.

## Returns
* The natural number representing the postion.
* The position starts at the eqivilent of zero.

# ```decltype(auto) read_size (const R &)```
## Pre-Conditions
## Effects
## Post-Conditions
## Requires
## Throws
## Exception Safty

## Returns
* Returns the size of the readable block.

# ```decltype(auto) write_size (const R &)```
## Pre-Conditions
## Effects
## Post-Conditions
## Requires
## Throws
## Exception Safty

## Returns
* Returns the size of the writable block.
==============================================================================*/
namespace bits {

template <typename R> bool           has_input  (const R &, true_tag <is_synced<R>>);
template <typename R> bool           has_input  (const R &, false_tag<is_synced<R>>);
template <typename R> bool           has_output (const R &, true_tag <is_synced<R>>);
template <typename R> bool           has_output (const R &, false_tag<is_synced<R>>);
template <typename R> bool           has_io     (const R &, true_tag <is_synced<R>>);
template <typename R> bool           has_io     (const R &, const tag<std::false_type, is_synced<R>>);
template <typename R> decltype(auto) read_size  (const R &, const tag<std::true_type,  is_synced<R>>);
template <typename R> decltype(auto) read_size  (const R &, const tag<std::false_type, is_synced<R>>);
template <typename R> decltype(auto) write_size (const R &, const tag<std::true_type,  is_synced<R>>);
template <typename R> decltype(auto) write_size (const R &, const tag<std::false_type, is_synced<R>>);
template <typename R> decltype(auto) rw_size    (const R &, const tag<std::true_type,  is_synced<R>>);
template <typename R> decltype(auto) rw_size    (const R &, const tag<std::false_type, is_synced<R>>);

} //------------------------------------------------------------------------bits

/*==============================================================================
  Modify Element

# ```R erase (R)```
## 
## Returns
* The range.

# ```R drain (R, T&)```
## Pre-Conditions
## Effects
## Post-Conditions
* Same as calling next.

## Requires
## Throws
## Exception Safty
## Returns
* The range.

# ```R write (R, T const &)```
## Post-Conditions
* Same as calling next.

# ```R emplace (R, Ts &&...)```
## 
==============================================================================*/

namespace bits {

//template <typename R, typename T> R drain (R, T&, tag<true, >);

} //------------------------------------------------------------------------bits

/*==============================================================================
  Resize

# ```R clear (R)```
# ```R expand (R, N)```
# ```R emplace_next (R, Ts &&...)```
# ```R emplace_prev (R, Ts &&...)```
# ```R emplace_front (R, Ts &&...)```
# ```R emplace_back (R, Ts &&...)```
==============================================================================*/
/*template <typename R>                 R erase     (R);
template <typename R>                 R pop_front (R);
template <typename R>                 R pop_back  (R);
template <typename R>                 R clear     (R);
template <typename R, tpynemae N>     R pop_front (R, N);
template <typename R, typename N>     R pop_back  (R, N);
template <typename R, typename N>     R erase     (R, N);

template <typename R>                 R expand   (R);
template <typename R, typename N>     R expand   (R, N);
template <typename R>                 R push_front  (R);
template <typename R>                 R push_back   (R);
template <typename R, typename N>     R push_front  (R, N);
template <typename R, typename N>     R push_back   (R, N);

template <typename R, typename... Ts> R emplace_next  (R, Ts &&...);
template <typename R, typename... Ts> R emplace_prev  (R, Ts &&...);
template <typename R, typename... Ts> R emplace_front (R, Ts &&...);
template <typename R, typename... Ts> R emplace_back  (R, Ts &&...);*/

/*==============================================================================
  Transversal

# ```R next (R)```
* Change the poistion by +1
* Same as calling next block 

# ```R next_block(R)```
* Change the poistion by + ```auto r_size (const R &)```

# ```R prev (R)```
* next & prev 
==============================================================================*/

} //-----------------------------------------------------------------range layer
#endif

