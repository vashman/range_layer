//

//          Copyright Sundeep S. Sangha 2015 - 2017.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#ifndef RANGE_LAYER_BITS_RANGE_RANGE_FWD
#define RANGE_LAYER_BITS_RANGE_RANGE_FWD

namespace range_layer {
/*==============================================================================
  Range

# ```make_range```
* Does not deduce pointer ranges correctly.

# Template types
* H = Handle
==============================================================================*/
namespace range_class {

template <typename T> struct spec;
template <typename H> struct iota;
template <typename H> struct variable;
template <typename H> struct pointer;
template <typename H> struct array;
template <typename H> struct allocator;

} //-----------------------------------------------------------------range class

template <typename... Ts>                         class range;
template <>                                       class range <>;
template <typename H>                             class range <H>;
template <typename H, typename D>                 class range <H, D>;
template <typename H, typename D, typename... Ts> class range <H, D, Ts...>;

template <typename T> class range <T *, range_class::variable>;
template <typename T> class range <const T *, range_class::variable>;
template <typename T> class range <volatile T *, range_class::variable>;
template <typename T> class range <const volatile T *, range_class::variable>;

template <typename T> class range <T *, range_class::iota>;
template <typename T> class range <const T *, range_class::iota>;

template <typename T> class range <T *, range_class::pointer>;

namespace range_class {

template <> struct spec <int> {using type = range_class::iota;};
template <> struct spec <char> {using type = range_class::iota;};
template <> struct spec <float> {using type = range_class::iota;};
template <> struct spec <double> {using type = range_class::iota;};
} //-----------------------------------------------------------------range class

template <typename... Ts> range<Ts...> make_range (Ts...);

namespace bits {

template <typename T> struct base_from_member;

} //------------------------------------------------------------------------bits
} //-----------------------------------------------------------------range layer
#endif

