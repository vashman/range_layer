// Traits for ranges.

//          Copyright Sundeep S. Sangha 2015 - 2017.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#ifndef RANGE_LAYER_BITS_TRAITS_FWD
#define RANGE_LAYER_BITS_TRAITS_FWD

namespace range_layer {
/*==============================================================================
  Traits

# ```struct is_range```
1. True if the range has;
  1. ```R next (R)```
  2. ```R (R &&)``` or ```R (const R &)```

# ```struct is_synced```
1. Input & Output have synced transversal.
2. Range has both input and output functions.

# ```struct is_input```
1. The following function is ...```R drain (R, T&)```?
2. ```bool has_readable (const R &)```

# ```struct is_readable```
1. True if the range has the following valid functions;
  1. ```T read (const R &)```
  2. ```auto read_size (const R &)```

# ```struct is_output```
1. True if the range has;
  1. ```R insert (R, Ts &&...)```
  2. ```bool has_output (const R &)```

# ```struct is_writable```
1. True if the range has;
  1. ```R write (R, Ts &&...)```
  2. ```bool has_writable (const R &)```

# ```struct is_next_linear```
1. True if range has ```R next (R, N)```.

# ```struct is_prev_linear```
1. True if range has ```R prev (R, N)```.

# ```struct is_reversable```
1. False if the range has ```R prev (R)```.

# ```struct is_finite```
1. True if frange has;
  1. ```auto size (const R &)```
  2. ```auto position (const R &)```

# ```struct is_front_shrinkable```
1. True if range has ```R pop_front (R)```.

# ```struct is_back_shrinkable```
1. True if range has ```R pop_back (R)```.

# ```struct is_shrinkable```
* True if range has ```R erase (R)```.

# ```struct is_expandable```
* True if range has ```R expand (R, N)```.

# ```struct is_clearable```
* True if range has ```R clear (R)```.

# ```struct is_front_expandable```
1. True if range has ```R push_front (R)```.

# ```struct is_back_expandable```
1. True if range has ```R push_back (R)```.

# Useful standard traits
* std::is_movable
* std::is_copable
* std::is_move_assignment
* std::is_copy_assignment
==============================================================================*/
template <typename R> struct size_type;
template <typename R> struct value_type;
template <typename R> struct is_range;
template <typename R> struct is_synced;
template <typename R> struct is_input;
//template <typename R> struct is_readable;//
template <typename R> struct is_output;
//template <typename R> struct is_writable;//
template <typename R> struct is_next_linear;
template <typename R> struct is_prev_linear;
template <typename R> struct is_reversable;
template <typename R> struct is_finite;
/*template <typename R> struct is_front_shrinkable;//
template <typename R> struct is_back_shrinkable;//
template <typename R> struct is_shrinkable;
template <typename R> struct is_expandable;
template <typename R> struct is_clearable;
template <typename R> struct is_front_expandable;//
template <typename R> struct is_back_expandable;*///
template <typename R> struct is_decorator;

} //-----------------------------------------------------------------range layer
#endif

