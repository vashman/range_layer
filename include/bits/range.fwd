//

//          Copyright Sundeep S. Sangha 2015 - 2017.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#ifndef RANGE_LAYER_BITS_RANGE_FWD
#define RANGE_LAYER_BITS_RANGE_FWD

namespace range_layer {
/*==============================================================================
  Range

# ```make_range```
* Does not deduce pointer ranges correctly.

# Template types
* H  = Handle
* T  = Element Type
* R  = Range
* D  = Decorator
* Ts = Type list
* S  = Type of Handle stored
==============================================================================*/
template <typename... Ts> class range;
template <>               class range <>;
template <typename H>     class range <H>;
template <typename R, typename D1, typename D2, typename... Ds>
                          class range <R, D1, D2, Ds...>;

namespace range_class {

template <typename T>                 struct spec;
template <typename H, typename S = H> struct iota;
template <typename H, typename S = H> struct variable;
template <typename H, typename S = H> struct pointer;
template <typename H, typename S = H> struct array;
template <typename H, typename S = H> struct allocator;

} //-----------------------------------------------------------------range class

/*==============================================================================
  Decorator
1. S = Sentinal
==============================================================================*/
template <typename Pred>             struct remove_if;
template <typename T>                struct remove;
template <typename T>                struct replace_read;
template <typename T>                struct replace_write;
template <typename T, typename Pred> struct replace_if_read;
template <typename T, typename Pred> struct replace_if_write;
template <typename Func>             struct transform_write;
template <typename Func>             struct transform_read;
template <typename Func>             struct transform;
template <typename N>                struct sub_range_n;
template <std::size_t I>             struct select;
template <typename S>                struct sub_range;
                                     struct backward;
                                     struct circular;
                                     struct disable_read;
                                     struct disable_write;
                                     struct checked_range;
                                     struct back_insert;
                                     struct disable_decorator;
                                     struct remove_decorator;

template <typename R, typename T, typename Pred>
                                     class range <R, replace_if_read<T, Pred>>;
template <typename R, typename Func> class range <R, transform<Func>>;
template <typename R>                class range <R, disable_read>;
template <typename R>                class range <R, disable_write>;
template <typename R>                class range <R, disable_decorator>;
template <typename R, typename S>    class range <R, sub_range<S>>;

template <typename... Ts> range<Ts...> make_range (Ts...);

/*==============================================================================
  Range operations

# Template Types 
1. T = Element
2. H = Handle
==============================================================================*/
/*------------------------------------------------------------------------------
  Empty range
------------------------------------------------------------------------------*/
constexpr std::size_t size     (const range<> &);
constexpr std::size_t position (const range<> &);
constexpr range<>     next     (const range<>);

/*-----------------------------------------------------------------------------
  Non-Modifing
-----------------------------------------------------------------------------*/
template <typename H> bool           has_input  (const range<H> &);
template <typename H> bool           has_output (const range<H> &);
template <typename H> bool           has_io     (const range<H> &);
template <typename H> decltype(auto) size       (const range<H> &);
template <typename H> decltype(auto) position   (const range<H> &);
template <typename H> decltype(auto) read_size  (const range<H> &);
template <typename H> decltype(auto) write_size (const range<H> &);
template <typename H> decltype(auto) rw_size    (const range<H> &);
template <typename H> const auto &   read       (const range<H> &, size_type_t<range<H>>);

/*-----------------------------------------------------------------------------
  Modify
-----------------------------------------------------------------------------*/
template <typename H, typename... Ts> void         write (range<H> &, size_type_t<range<H>>, Ts &&...);
template <typename H, typename... Ts> void         write (range<H> &&, size_type_t<range<H>>, Ts &&...);
template <typename H, typename... Ts> range<Ts...> insert(range<H>, Ts &&...);
template <typename H>                 void         swap  (range<H> &, value_type_t<range<H>> &);
template <typename H>                 range<Ts...> drain (range<H>, value_type_t<range<H>> &);

/*-----------------------------------------------------------------------------
  Transversal
-----------------------------------------------------------------------------*/
template <typename H> range<H> next (range<H>);
template <typename H> range<H> prev (range<H>);
template <typename H> range<H> next (range<H>, size_type_t<range<H>>);
template <typename H> range<H> prev (range<H>, size_type_t<range<H>>);

namespace bits {

template <typename T> T & to_ref (T &);
template <typename T> T & to_ref (T *);

} //------------------------------------------------------------------------bits
} //-----------------------------------------------------------------range layer
#endif

